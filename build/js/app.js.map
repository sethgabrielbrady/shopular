{"version":3,"sources":["../../src/js/inventory.controller.js"],"names":["angular","module","controller","InventoryController","taxes","clickCount","$inject","InventoryService","vm","sortType","sortReverse","newItem","inventory","getInventory","priceAdj","item","price","discount","changeCountry","document","querySelector","innerHTML","changeTable","forEach","name","console","log","addItem","removeItems"],"mappings":";;AAAC,aAAW;AACJ;;AAEAA,YAAQC,MAAR,CAAe,UAAf,EACKC,UADL,CACgB,qBADhB,EACuCC,mBADvC;;AAGA,QAAMC,QAAQ,MAAd;AACA,QAAIC,aAAa,CAAjB;AACAF,wBAAoBG,OAApB,GAA8B,CAAC,kBAAD,CAA9B;;AAEA,aAASH,mBAAT,CAA6BI,gBAA7B,EAA+C;;AAG3C,YAAIC,KAAK,IAAT;AACAA,WAAGJ,KAAH,GAAWA,KAAX;AACAI,WAAGC,QAAH,GAAc,OAAd;AACAD,WAAGE,WAAH,GAAiB,KAAjB;AACAF,WAAGG,OAAH,GAAa,EAAb;AACAH,WAAGI,SAAH,GAAeL,iBAAiBM,YAAjB,EAAf;AACAL,WAAGH,UAAH,GAAc,CAAd;;AAEA;;;;;;;AAOAG,WAAGM,QAAH,GAAc,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAClC,mBAAQ,CAACA,KAAKC,KAAL,GAAaD,KAAKE,QAAnB,KAAgCT,GAAGJ,KAAH,GAAW,CAA3C,CAAR;AACH,SAFD;;AAIA;;;;;AAKAI,WAAGU,aAAH,GAAmB,SAASA,aAAT,GAAyB;AACxCC,qBAASC,aAAT,CAAuB,SAAvB,EAAkCC,SAAlC,GAA8C,QAA9C;AACH,SAFD;;AAKA;;;;;;AAMAb,WAAGc,WAAH,GAAiB,SAASA,WAAT,GAAuB;AACpCtB,oBAAQuB,OAAR,CAAgBf,GAAGI,SAAnB,EAA8B,UAASG,IAAT,EAAe;AACrC,oBAAIV,eAAe,CAAnB,EAAsB;;AAElB,wBAAIU,KAAKS,IAAL,KAAc,cAAlB,EAAkC;AAC9BT,6BAAKS,IAAL,GAAY,aAAZ;AACAC,gCAAQC,GAAR,CAAYX,KAAKS,IAAjB;AACH;;AAEDT,yBAAKC,KAAL,GAAaD,KAAKC,KAAL,GAAa,GAA1B;;AAEAS,4BAAQC,GAAR,CAAYX,KAAKC,KAAjB;;AAEAX;AACD;AACF,aAdT;;AAgBQoB,oBAAQC,GAAR,CAAYrB,UAAZ;AACP,SAlBL;;AAoBI;;;;;;;AAOAG,WAAGmB,OAAH,GAAa,SAASA,OAAT,CAAiBZ,IAAjB,EAAuB;AAChCR,6BAAiBoB,OAAjB,CAAyBZ,IAAzB;AACAP,eAAGG,OAAH,GAAa,EAAb;AACH,SAHD;;AAKA;;;;;;AAMAH,WAAGoB,WAAH,GAAiB,SAASA,WAAT,CAAqBb,IAArB,EAA2B;AACxCR,6BAAiBqB,WAAjB,CAA6Bb,IAA7B;AACH,SAFD;AAID;AACN,CA3FR,GAAD","file":"app.js","sourcesContent":["(function() {\n        'use strict';\n\n        angular.module('shopular')\n            .controller('InventoryController', InventoryController);\n\n        const taxes = 0.0575;\n        let clickCount = 0;\n        InventoryController.$inject = ['InventoryService'];\n\n        function InventoryController(InventoryService) {\n\n\n            let vm = this;\n            vm.taxes = taxes;\n            vm.sortType = 'price';\n            vm.sortReverse = false;\n            vm.newItem = {};\n            vm.inventory = InventoryService.getInventory();\n            vm.clickCount=0;\n\n            /**\n             * Takes in the inventory object, subtracts the discount property value from the\n             * price property value, adds that to the price prop value multiplied\n             * by the the taxes variable.\n             * @param  {Object} item [uses the inventory object]\n             * @return {Number}      [returns a price adjusted for discounts and taxes\n             */\n            vm.priceAdj = function priceAdj(item) {\n                return ((item.price - item.discount) * (vm.taxes + 1));\n            };\n\n            /**\n             * Will change the word color to colour in the table\n             * on the 'United Kingdom ' button click\n             * @return {VOID}\n             */\n            vm.changeCountry = function changeCountry() {\n                document.querySelector('.change').innerHTML = 'COLOUR';\n            };\n\n\n            /**\n             *Will mulitply the inventory price value by 1.5 and change\n             *'waste basket' to 'rubbish bin' on the button click. A counter\n             *was included so that this could only be done once.\n             * @return {VOID}\n             */\n            vm.changeTable = function changeTable() {\n                angular.forEach(vm.inventory, function(item) {\n                        if (clickCount === 0) {\n\n                            if (item.name === 'waste basket') {\n                                item.name = 'rubbish bin';\n                                console.log(item.name);\n                            }\n\n                            item.price = item.price * 1.5;\n\n                            console.log(item.price);\n\n                            clickCount++;\n                          }\n                        });\n\n                        console.log(clickCount);\n                };\n\n                /**\n                 **Points vm.addItem to fn that takes an object and passes it to\n                 * removeItems fn inside InventoryService. Afterwards it puts\n                 * an empty object inside vm.newItem\n                 * @param {Object} item  object that gets passed to removeItems\n                 * @return {Void}\n                 */\n                vm.addItem = function addItem(item) {\n                    InventoryService.addItem(item);\n                    vm.newItem = {};\n                };\n\n                /**\n                 * Points vm.removeItems to a that takes an object and passes it to\n                 * removeItems fn inside InventoryService\n                 * @param  {Object} item object that gets passed to removeItems\n                 * @return {Void}\n                 */\n                vm.removeItems = function removeItems(item) {\n                    InventoryService.removeItems(item);\n                };\n\n              }\n        }());\n"]}